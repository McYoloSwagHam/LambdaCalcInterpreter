#BlueJ class context
comment0.target=ASTFormatter
comment0.text=\r\n\ this\ class\ is\ just\ there\ for\ debugging\ and\ formatting\r\n\ it's\ only\ purpose\ it\ to\ turn\ an\ AST\ tree\ into\ a\ string\ form\r\n\ for\ printing\r\n
comment1.params=funcType
comment1.target=java.lang.String\ FormatFunctionType(FunctionType)
comment1.text=\r\n\ returns\ a\ string\ based\ on\ the\ function\ type\r\n\ @param\ funcType\ the\ function\ type\ of\ the\ node\r\n\ @return\ the\ string\ that\ reprents\ the\ function\ type\r\n
comment2.params=node
comment2.target=java.lang.String\ FormatNodeInformation(ASTNode)
comment2.text=\r\n\ depending\ on\ the\ function\ type\ it\ returns\ the\ relevant\ information\r\n\ for\ that\ node...\ (locals,\ function\ calls);\r\n\ @param\ node\ the\ node\ whose\ information\ we\ need\ to\ format\r\n\ @return\ the\ string\ that\ reprents\ the\ node\ info\r\n
comment3.params=node
comment3.target=java.lang.String\ FormatNode(ASTNode)
comment3.text=\r\n\ returns\ the\ string\ version\ of\ the\ node,\ could\ be\ toString\ for\ ASTNode\r\n\ @param\ node\ -\ the\ node\ to\ format\r\n\ @return\ the\ human\ understandable\ notation\ of\ the\ node\ as\ a\ string\r\n
comment4.params=rootNode
comment4.target=java.lang.String\ FormatAST(ASTNode)
comment4.text=\r\n\ takes\ a\ rootNode\ representing\ an\ AST\ and\ returns\ a\ human\ understandable\ string\ representing\ it\r\n\ @param\ rootNode\ -\ the\ AST\r\n\ @return\ the\ string\ representing\ the\ AST\r\n
comment5.params=rootNode
comment5.target=java.lang.String\ FormatASTAsLambda(ASTNode)
comment5.text=\r\n\ prints\ AST\ as\ a\ lambda\ expression\r\n\ @param\ rootNode\ -\ the\ AST\ to\ convert\ into\ a\ lambda\r\n\ @return\ the\ AST\ in\ lambda\ form\r\n
numComments=6
