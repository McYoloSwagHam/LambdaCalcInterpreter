#BlueJ class context
comment0.target=ASTNode
comment0.text=\r\n\ ASTNode\ is\ the\ class\ that\ reprents\ a\ node\ in\ an\ AST,\ \r\n\ it\ has\ 1\ parent\ and\ many\ childs,\r\n\ it\ can\ either\ be\ a\ none\ (representing\ empty\ brackets),\r\n\ NESTED_FUNCTION\ (representing\ an\ abstraction)\r\n\ FUNCTION_CALL\ (represneting\ an\ application)\r\n
comment1.params=hash\ info
comment1.target=int\ RollingHash(int,\ int)
comment1.text=\r\n\ this\ is\ my\ implementation\ of\ a\ dumb\ rolling\ hash\ that\ is\r\n\ meant\ to\ be\ unique,\ obviously\ doesn't\ have\ a\ gread\ period,\r\n\ could\ be\ its\ own\ class\ but\ it's\ way\ too\ small\r\n\ @param\ hash\ -\ basically\ a\ this\ pointer\r\n\ @param\ info\ -\ the\ hash\ info\ that\ changes\ this\ rolling\ hash\r\n\ @return\ the\ new\ rolling\ hash\r\n
comment2.params=
comment2.target=void\ Upgrade()
comment2.text=\r\n\ this\ function\ moves\ a\ node\ up\ a\ level.\r\n
comment3.params=rootNode
comment3.target=int\ HashAST(ASTNode)
comment3.text=\r\n\ this\ function\ Hashes\ the\ AST\ starting\ from\ the\ rootNode\r\n\ @param\ rootNode\ -\ the\ AST\r\n\ @return\ the\ hash\ of\ the\ AST\ represented\ as\ an\ integer.\r\n
comment4.params=
comment4.target=boolean\ hasChildren()
comment4.text=\ \r\n\ checks\ if\ a\ node\ has\ children\r\n\ @return\ true\ if\ this\ node\ has\ childre\ otherwise\ false\r\n
comment5.params=sourceNode
comment5.target=void\ CloneSubTree(ASTNode)
comment5.text=\r\n\ CloneSubTree\ literally\ recursively\ copies\ the\ tree\ of\ a\ node\ starting\ a\ sourceNode\r\n\ to\ the\ currentNode,\ it\ is\ a\ graphic\ substition\r\n\ @param\ sourceNode\ -\ the\ node\ to\ copy\ the\ tree\ from\r\n
comment6.params=sourceNode\ targetNode
comment6.target=void\ CloneNode(ASTNode,\ ASTNode)
comment6.text=\r\n\ this\ function\ copys\ the\ properties\ of\ the\ node\ from\ one\ node\ to\ another\r\n\ but\ it\ does\ not\ copy\ the\ graphical\ portions\ (parents/children)\r\n\ @param\ sourceNode\ -\ the\ source\ node\ to\ copy\ from\r\n\ @param\ targetNode\ -\ the\ target\ node\ to\ copy\ to\r\n
comment7.params=nodeParent
comment7.target=ASTNode(ASTNode)
comment7.text=\r\n\ this\ constructor\ makes\ a\ new\ astnode,\ and\ links\ it\ to\ a\ parent\r\n\ @param\ nodeParent\ -\ the\ to\ be\ parent\ of\ this\ node\r\n
comment8.params=
comment8.target=ASTNode()
comment8.text=\r\n\ this\ constructor\ makes\ a\ empty\ new\ node\ assigned\ as\ a\ NONE\ type\r\n
numComments=9
